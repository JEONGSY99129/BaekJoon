#include<iostream>
#include<vector>
#include<algorithm>
#include<stdio.h>
#include<queue>
using namespace std;
#define MAX 25
#define _CRT_SECURE_NO_WARNINGS
int move_x[4] = { 0, 0, 1, -1 };
int move_y[4] = { 1, -1, 0, 0 };

class Map {
public:
	int N;
	int village[MAX][MAX];
	vector <int> HouseCount;
	int count;
	queue <int> q;
	void BFS(int y, int x) {
		q.push(y);
		q.push(x);

		while (!q.empty()) {
			int current_y, current_x;
			current_y = q.front();
			q.pop();
			current_x = q.front();
			q.pop();
			for (int i = 0; i < 4; i++) {
				int next_x = current_x + move_x[i];
				int next_y = current_y + move_y[i];

				if ((next_x < 0) || (next_x >= N) || (next_y < 0) || (next_y >= N))
					continue;

				if (village[next_y][next_x])
				{	village[next_y][next_x] = 0;
					count++;
					q.push(next_y);
					q.push(next_x);
				}
			}
		}
	}
};

int main() {
	Map Chulsu;
	int Block = 0;
	cin >> Chulsu.N;

	for (int i = 0; i < Chulsu.N; i++) {
		for (int j = 0; j < Chulsu.N; j++) {
			scanf_s("%1d", &Chulsu.village[i][j]);
		}
	}

	for (int i = 0; i < Chulsu.N; i++) {
		for (int j = 0; j < Chulsu.N; j++) {
			if (Chulsu.village[i][j]) //그 위치에 1이 있으면
			{
				Chulsu.village[i][j] = 0;
				Chulsu.count = 1;
				Chulsu.BFS(i, j);
				Block++;
				Chulsu.HouseCount.push_back(Chulsu.count);
			}
		}
	}

	sort(Chulsu.HouseCount.begin(), Chulsu.HouseCount.end());
	cout << Block << endl;
	for (int i = 0; i < Chulsu.HouseCount.size(); i++) {
		cout << Chulsu.HouseCount[i] << endl;
	}
}
